# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from typing import Any

import pytest
from authlib.integrations.httpx_client import AsyncOAuth2Client
from pydantic import BaseSettings
from starlette.testclient import TestClient

from fastramqpi.config import Settings as FastRAMQPISettings


class Settings(BaseSettings):
    class Config:
        frozen = True
        env_nested_delimiter = "__"

    fastramqpi: FastRAMQPISettings


class FakeAutogeneratedGraphQLClient:
    def __init__(self, mo_client: AsyncOAuth2Client):
        self.mo_client = mo_client

    async def _testing__get_employee(self, cpr_number: str) -> dict[str, Any]:
        query = """
            query _Testing_GetEmployee($cpr_number: CPR!) {
              employees(filter: {cpr_numbers: [$cpr_number]}) {
                objects {
                  objects {
                    uuid
                    cpr_number
                    given_name
                  }
                }
              }
            }
        """
        r = await self.mo_client.post(
            "/graphql/v20",
            json=dict(
                query=query,
                variables={
                    "cpr_number": cpr_number,
                },
            ),
        )
        # ariadne returns the 'employee' field directly when it is the only one
        employees = r.json()["data"]["employees"]
        assert isinstance(employees, dict)
        return employees

    async def _testing__create_employee(self, cpr_number: str) -> dict[str, Any]:
        query = """
            mutation _Testing_CreateEmployee($cpr_number: CPR!) {
              employee_create(
                input: {
                  given_name: "Alice",
                  surname: "Nielsen",
                  cpr_number: $cpr_number,
                }
              ) {
                objects {
                  uuid
                }
              }
            }
        """
        r = (
            await self.mo_client.post(
                "/graphql/v20",
                json=dict(
                    query=query,
                    variables={
                        "cpr_number": cpr_number,
                    },
                ),
            )
        ).json()
        assert r.get("errors") is None
        # ariadne returns the 'employee_create' field directly when it is the only one
        employees = r["data"]["employee_create"]
        assert isinstance(employees, dict)
        return employees


@pytest.fixture
async def graphql_client(test_client: TestClient) -> FakeAutogeneratedGraphQLClient:
    """Fake authenticated GraphQL codegen client for OS2mo.

    We don't use an autogenerated codegen client here to avoid polluting the repo.
    """
    mo_client = test_client.app_state["context"]["mo_client"]
    return FakeAutogeneratedGraphQLClient(mo_client)
