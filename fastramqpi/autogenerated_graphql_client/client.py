# Generated by ariadne-codegen on 2025-04-23 13:23
# Source: queries.graphql

from typing import Any
from typing import Optional
from uuid import UUID

from .acknowledge_event import AcknowledgeEvent
from .async_base_client import AsyncBaseClient
from .declare_event_listener import DeclareEventListener
from .declare_event_listener import DeclareEventListenerEventListenerDeclare
from .declare_event_namespace import DeclareEventNamespace
from .declare_event_namespace import DeclareEventNamespaceEventNamespaceDeclare
from .fetch_event import FetchEvent
from .fetch_event import FetchEventEventFetch
from .input_types import ListenerCreateInput
from .input_types import NamespaceCreateInput


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def declare_event_namespace(
        self, input: NamespaceCreateInput
    ) -> DeclareEventNamespaceEventNamespaceDeclare:
        query = gql(
            """
            mutation DeclareEventNamespace($input: NamespaceCreateInput!) {
              event_namespace_declare(input: $input) {
                name
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DeclareEventNamespace.parse_obj(data).event_namespace_declare

    async def declare_event_listener(
        self, input: ListenerCreateInput
    ) -> DeclareEventListenerEventListenerDeclare:
        query = gql(
            """
            mutation DeclareEventListener($input: ListenerCreateInput!) {
              event_listener_declare(input: $input) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DeclareEventListener.parse_obj(data).event_listener_declare

    async def fetch_event(self, listener: UUID) -> Optional[FetchEventEventFetch]:
        query = gql(
            """
            query FetchEvent($listener: UUID!) {
              event_fetch(filter: {listener: $listener}) {
                subject
                priority
                token
              }
            }
            """
        )
        variables: dict[str, object] = {"listener": listener}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return FetchEvent.parse_obj(data).event_fetch

    async def acknowledge_event(self, token: Any) -> bool:
        query = gql(
            """
            mutation AcknowledgeEvent($token: EventToken!) {
              event_acknowledge(input: {token: $token})
            }
            """
        )
        variables: dict[str, object] = {"token": token}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return AcknowledgeEvent.parse_obj(data).event_acknowledge
